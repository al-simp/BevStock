{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alans\\\\bevstock\\\\client\\\\src\\\\components\\\\stocktaking\\\\Bottle.js\";\nimport React, { useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nimport CountModal from \"./CountModal\";\n\nconst Bottle = props => {\n  const [bottle, setBottle] = useState({});\n  const {\n    result,\n    hasScanned,\n    hasResult,\n    setPairBool\n  } = props;\n\n  const getBottle = async () => {\n    if (result !== null && !hasResult && !hasScanned) {\n      console.log(\"result\", result, \"scanned\", hasScanned, \"hasResult\", hasResult);\n      setPairBool(\"hasScanned\", true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/products/${result}`, {\n          method: \"GET\",\n          headers: {\n            token: localStorage.token\n          }\n        });\n        const parseData = await response.json();\n        console.log(parseData.length);\n        setBottle(parseData);\n        console.log(parseData);\n        setPairBool(\"hasResult\", true);\n        console.log(bottle);\n      } catch (err) {\n        console.error(err.message);\n        setPairBool(\"hasScanned\", false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!hasResult) {\n      getBottle();\n    }\n  }, [result, bottle]);\n  return !_.isEmpty(bottle) ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(CountModal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 36\n    }\n  })) : /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 58\n    }\n  }, \"No bottle found\");\n};\n\nexport default Bottle;","map":{"version":3,"sources":["C:/Users/alans/bevstock/client/src/components/stocktaking/Bottle.js"],"names":["React","useEffect","useState","_","CountModal","Bottle","props","bottle","setBottle","result","hasScanned","hasResult","setPairBool","getBottle","console","log","response","fetch","method","headers","token","localStorage","parseData","json","length","err","error","message","isEmpty"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACxB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAM;AAAEO,IAAAA,MAAF;AAAUC,IAAAA,UAAV;AAAsBC,IAAAA,SAAtB;AAAiCC,IAAAA;AAAjC,MAAiDN,KAAvD;;AAGA,QAAMO,SAAS,GAAG,YAAY;AAE5B,QAAIJ,MAAM,KAAK,IAAX,IAAmB,CAACE,SAApB,IAAiC,CAACD,UAAtC,EAAkD;AAChDI,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBN,MAAtB,EAA8B,SAA9B,EAAyCC,UAAzC,EAAqD,WAArD,EAAkEC,SAAlE;AACEC,MAAAA,WAAW,CAAC,YAAD,EAAe,IAAf,CAAX;;AACF,UAAI;AACF,cAAMI,QAAQ,GAAG,MAAMC,KAAK,CACzB,kCAAiCR,MAAO,EADf,EAE1B;AACES,UAAAA,MAAM,EAAE,KADV;AAEEC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,KAAK,EAAEC,YAAY,CAACD;AAAtB;AAFX,SAF0B,CAA5B;AAQA,cAAME,SAAS,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAxB;AAEAT,QAAAA,OAAO,CAACC,GAAR,CAAYO,SAAS,CAACE,MAAtB;AACAhB,QAAAA,SAAS,CAACc,SAAD,CAAT;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAYO,SAAZ;AACAV,QAAAA,WAAW,CAAC,WAAD,EAAc,IAAd,CAAX;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACD,OAhBD,CAgBE,OAAOkB,GAAP,EAAY;AACZX,QAAAA,OAAO,CAACY,KAAR,CAAcD,GAAG,CAACE,OAAlB;AACAf,QAAAA,WAAW,CAAC,YAAD,EAAe,KAAf,CAAX;AACD;AACF;AACF,GA1BD;;AA4BAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACU,SAAL,EAAgB;AAClBE,MAAAA,SAAS;AACN;AACJ,GAJQ,EAIN,CAACJ,MAAD,EAASF,MAAT,CAJM,CAAT;AAMA,SAAO,CAACJ,CAAC,CAACyB,OAAF,CAAUrB,MAAV,CAAD,gBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAK,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,CAArB,gBAAgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAvD;AACD,CAzCD;;AA2CA,eAAeF,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport CountModal from \"./CountModal\";\r\n\r\nconst Bottle = (props) => {\r\n  const [bottle, setBottle] = useState({});\r\n\r\n  const { result, hasScanned, hasResult, setPairBool } = props;\r\n  \r\n\r\n  const getBottle = async () => {\r\n    \r\n    if (result !== null && !hasResult && !hasScanned) {\r\n      console.log(\"result\", result, \"scanned\", hasScanned, \"hasResult\", hasResult)\r\n        setPairBool(\"hasScanned\", true);\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:5000/products/${result}`,\r\n          {\r\n            method: \"GET\",\r\n            headers: { token: localStorage.token },\r\n          }\r\n        );\r\n\r\n        const parseData = await response.json();\r\n        \r\n        console.log(parseData.length);\r\n        setBottle(parseData);\r\n        console.log(parseData);\r\n        setPairBool(\"hasResult\", true);\r\n        console.log(bottle);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        setPairBool(\"hasScanned\", false);\r\n      }\r\n    } \r\n  };\r\n\r\n  useEffect(() => {\r\n      if (!hasResult) {\r\n    getBottle();\r\n      }\r\n  }, [result, bottle]);\r\n\r\n  return !_.isEmpty(bottle) ? <div><CountModal/></div> : <h1>No bottle found</h1>\r\n};\r\n\r\nexport default Bottle;\r\n"]},"metadata":{},"sourceType":"module"}