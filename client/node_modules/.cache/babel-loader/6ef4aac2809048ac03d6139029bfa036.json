{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alans\\\\bevstock\\\\client\\\\src\\\\components\\\\stocktaking\\\\Product.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport { DragSource, DropTarget, ConnectDropTarget, ConnectDragSource, DropTargetMonitor, DropTargetConnector, DragSourceConnector, DragSourceMonitor } from 'react-dnd';\nimport { XYCoord } from 'dnd-core';\nimport flow from 'lodash/flow';\nconst style = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  marginBottom: '.5rem',\n  backgroundColor: 'white',\n  cursor: 'move'\n};\nconst cardSource = {\n  beginDrag(props) {\n    return {\n      id: props.id,\n      index: props.index\n    };\n  }\n\n};\nconst cardTarget = {\n  hover(props, monitor, component) {\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index; // Don't replace items with themselves\n\n    if (dragIndex === hoverIndex) {\n      return;\n    } // Determine rectangle on screen\n\n\n    const hoverBoundingRect = findDOMNode(component).getBoundingClientRect(); // Get vertical middle\n\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n    const clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n    const hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n    // When dragging downwards, only move when the cursor is below 50%\n    // When dragging upwards, only move when the cursor is above 50%\n    // Dragging downwards\n\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return;\n    } // Dragging upwards\n\n\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return;\n    } // Time to actually perform the action\n\n\n    props.moveCard(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n\n    monitor.getItem().index = hoverIndex;\n  }\n\n};\n\nclass Product extends React.Component {\n  render() {\n    const {\n      text,\n      isDragging,\n      connectDragSource,\n      connectDropTarget\n    } = this.props;\n    const opacity = isDragging ? 0 : 1;\n    return connectDragSource && connectDropTarget && connectDragSource(connectDropTarget( /*#__PURE__*/React.createElement(\"div\", {\n      style: { ...style,\n        opacity\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 27\n      }\n    }, text)));\n  }\n\n}\n\nProduct.propTypes = {\n  connectDragSource: PropTypes.func.isRequired,\n  connectDropTarget: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  id: PropTypes.any.isRequired,\n  text: PropTypes.string.isRequired,\n  moveCard: PropTypes.func.isRequired\n};\nexport default flow(DragSource('card', cardSource, (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  isDragging: monitor.isDragging()\n})), DropTarget('card', cardTarget, connect => ({\n  connectDropTarget: connect.dropTarget()\n})))(Product);","map":{"version":3,"sources":["C:/Users/alans/bevstock/client/src/components/stocktaking/Product.js"],"names":["React","PropTypes","findDOMNode","DragSource","DropTarget","ConnectDropTarget","ConnectDragSource","DropTargetMonitor","DropTargetConnector","DragSourceConnector","DragSourceMonitor","XYCoord","flow","style","border","padding","marginBottom","backgroundColor","cursor","cardSource","beginDrag","props","id","index","cardTarget","hover","monitor","component","dragIndex","getItem","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","moveCard","Product","Component","render","text","isDragging","connectDragSource","connectDropTarget","opacity","propTypes","func","isRequired","number","bool","any","string","connect","dragSource","dropTarget"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { findDOMNode } from 'react-dom';\r\nimport {\r\n  DragSource,\r\n  DropTarget,\r\n  ConnectDropTarget,\r\n  ConnectDragSource,\r\n  DropTargetMonitor,\r\n  DropTargetConnector,\r\n  DragSourceConnector,\r\n  DragSourceMonitor,\r\n} from 'react-dnd';\r\nimport { XYCoord } from 'dnd-core';\r\nimport flow from 'lodash/flow';\r\n\r\nconst style = {\r\n  border: '1px dashed gray',\r\n  padding: '0.5rem 1rem',\r\n  marginBottom: '.5rem',\r\n  backgroundColor: 'white',\r\n  cursor: 'move',\r\n};\r\n\r\nconst cardSource = {\r\n  beginDrag(props) {\r\n    return {\r\n      id: props.id,\r\n      index: props.index,\r\n    }\r\n  },\r\n};\r\n\r\nconst cardTarget = {\r\n  hover(props, monitor, component) {\r\n    const dragIndex = monitor.getItem().index\r\n    const hoverIndex = props.index\r\n\r\n    // Don't replace items with themselves\r\n    if (dragIndex === hoverIndex) {\r\n      return;\r\n    }\r\n\r\n    // Determine rectangle on screen\r\n    const hoverBoundingRect = (findDOMNode(\r\n      component,\r\n    )).getBoundingClientRect();\r\n\r\n    // Get vertical middle\r\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n\r\n    // Determine mouse position\r\n    const clientOffset = monitor.getClientOffset();\r\n\r\n    // Get pixels to the top\r\n    const hoverClientY = (clientOffset).y - hoverBoundingRect.top;\r\n\r\n    // Only perform the move when the mouse has crossed half of the items height\r\n    // When dragging downwards, only move when the cursor is below 50%\r\n    // When dragging upwards, only move when the cursor is above 50%\r\n    // Dragging downwards\r\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n      return;\r\n    }\r\n\r\n    // Dragging upwards\r\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n      return;\r\n    }\r\n\r\n    // Time to actually perform the action\r\n    props.moveCard(dragIndex, hoverIndex);\r\n\r\n    // Note: we're mutating the monitor item here!\r\n    // Generally it's better to avoid mutations,\r\n    // but it's good here for the sake of performance\r\n    // to avoid expensive index searches.\r\n    monitor.getItem().index = hoverIndex;\r\n  },\r\n}\r\n\r\nclass Product extends React.Component {\r\n  static propTypes = {\r\n    connectDragSource: PropTypes.func.isRequired,\r\n    connectDropTarget: PropTypes.func.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    isDragging: PropTypes.bool.isRequired,\r\n    id: PropTypes.any.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    moveCard: PropTypes.func.isRequired,\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      text,\r\n      isDragging,\r\n      connectDragSource,\r\n      connectDropTarget,\r\n    } = this.props;\r\n    const opacity = isDragging ? 0 : 1;\r\n\r\n    return (\r\n      connectDragSource &&\r\n      connectDropTarget &&\r\n      connectDragSource(\r\n        connectDropTarget(<div style={{ ...style, opacity }}>{text}</div>),\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default flow(\r\n  DragSource(\r\n    'card',\r\n    cardSource,\r\n    (connect, monitor) => ({\r\n      connectDragSource: connect.dragSource(),\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  ),\r\n  DropTarget('card', cardTarget, (connect) => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n  }))\r\n)(Product);"]},"metadata":{},"sourceType":"module"}