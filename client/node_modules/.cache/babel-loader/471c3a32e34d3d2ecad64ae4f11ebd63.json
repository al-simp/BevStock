{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alans\\\\bevstock\\\\client\\\\src\\\\components\\\\Login.js\";\nimport React, { Fragment, useState } from \"react\";\nimport { toast } from \"react-toastify\";\n\nconst Login = ({\n  setAuth\n}) => {\n  const [inputs, setInputs] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const {\n    email,\n    password\n  } = inputs;\n\n  const onChange = e => {\n    setInputs({ ...inputs,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onSubmitform = async e => {\n    e.preventDefault();\n\n    try {\n      const body = {\n        email,\n        password\n      };\n      const response = await fetch(`http://localhost:5000/auth/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      const parseRes = await response.json();\n\n      if (parseRes.token) {\n        localStorage.setItem(\"token\", parseRes.token);\n        localStorage.setItem(\"role\", parseRes.role);\n        localStorage.setItem(\"name\", parseRes.name);\n        checkStocktake();\n        findLastStocktake();\n        setAuth(true);\n        toast.success(\"Login successful!\");\n      } else {\n        setAuth(false);\n        toast.error(parseRes);\n      }\n    } catch (err) {\n      console.error(err.message);\n    }\n  }; //method to check if there are any active stocktakes within the database.\n\n\n  async function checkStocktake() {\n    try {\n      const response = await fetch(\"http://localhost:5000/stocktake/activestocktake\", {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseRes = await response.json(); // if a record exists, set the data in local storage.\n\n      if (parseRes.length > 0) {\n        localStorage.setItem(\"stocktake\", parseRes[0].stocktake_id);\n        localStorage.setItem(\"stocktakedate\", parseRes[0].stocktake_date);\n      } else {}\n    } catch (error) {\n      console.error(error.message);\n    }\n  } //method to find last stocktake for inventory records\n\n\n  async function findLastStocktake() {\n    try {\n      const response = await fetch(\"http://localhost:5000/inventory/latest\", {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseRes = await response.json();\n      localStorage.setItem(\"laststocktake\", parseRes[0].stocktake_id);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"m-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center my-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Login\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmitform,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"email\",\n    className: \"form-control my-3\",\n    value: email,\n    onChange: e => onChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"password\",\n    className: \"form-control my-3\",\n    onChange: e => onChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-success btn-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, \"Submit\"))));\n};\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/alans/bevstock/client/src/components/Login.js"],"names":["React","Fragment","useState","toast","Login","setAuth","inputs","setInputs","email","password","onChange","e","target","name","value","onSubmitform","preventDefault","body","response","fetch","method","headers","JSON","stringify","parseRes","json","token","localStorage","setItem","role","checkStocktake","findLastStocktake","success","error","err","console","message","length","stocktake_id","stocktake_date"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\nconst Login = ({ setAuth }) => {\r\n  const [inputs, setInputs] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const { email, password } = inputs;\r\n\r\n\r\n  const onChange = (e) => {\r\n    setInputs({ ...inputs, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onSubmitform = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const body = { email, password };\r\n\r\n      const response = await fetch(`http://localhost:5000/auth/login`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n\r\n      const parseRes = await response.json();\r\n\r\n      if (parseRes.token) {\r\n        localStorage.setItem(\"token\", parseRes.token);\r\n        localStorage.setItem(\"role\", parseRes.role);\r\n        localStorage.setItem(\"name\", parseRes.name);\r\n        checkStocktake();\r\n        findLastStocktake();\r\n\r\n        setAuth(true);\r\n\r\n        toast.success(\"Login successful!\");\r\n      } else {\r\n        setAuth(false);\r\n\r\n        toast.error(parseRes);\r\n      }\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n   //method to check if there are any active stocktakes within the database.\r\n   async function checkStocktake() {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:5000/stocktake/activestocktake\",\r\n        {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        }\r\n      );\r\n\r\n      const parseRes = await response.json();\r\n\r\n      // if a record exists, set the data in local storage.\r\n      if (parseRes.length > 0) {\r\n        localStorage.setItem(\"stocktake\", parseRes[0].stocktake_id);\r\n        localStorage.setItem(\"stocktakedate\", parseRes[0].stocktake_date);\r\n      } else {\r\n      }\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  }\r\n\r\n  //method to find last stocktake for inventory records\r\n  async function findLastStocktake() {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/inventory/latest\", {\r\n        method: \"GET\",\r\n        headers: { token: localStorage.token },\r\n      });\r\n      const parseRes = await response.json();\r\n      localStorage.setItem(\"laststocktake\", parseRes[0].stocktake_id);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"m-5\">\r\n        <h1 className=\"text-center my-5\">Login</h1>\r\n        <form onSubmit={onSubmitform}>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"email\"\r\n            className=\"form-control my-3\"\r\n            value={email}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"password\"\r\n            className=\"form-control my-3\"\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <button className=\"btn btn-success btn-block\">Submit</button>\r\n        </form>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}