{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alans\\\\bevstock\\\\client\\\\src\\\\components\\\\stocktaking\\\\StocktakeLists.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Moment from \"react-moment\";\nimport { toast } from \"react-toastify\"; //components\n\nimport ShowLists from \"./ShowLists\";\n\nconst StocktakeLists = ({\n  setAuth\n}) => {\n  const [stocktake, setStocktake] = useState(false);\n  const [allLists, setLists] = useState([]);\n  const [listsChange, setListsChange] = useState(false);\n  const [products, setProducts] = useState([]);\n  const [allCounted, setAllCounted] = useState(false);\n  const [distinctProducts, setDistinctProducts] = useState([]);\n  const currentStocktake = localStorage.getItem(\"laststocktake\");\n  const dateString = Date().toString();\n  const stocktake_id = localStorage.getItem(\"stocktake\");\n\n  const checkStocktake = () => {\n    if (stocktake_id !== null) {\n      setStocktake(true);\n    }\n  };\n\n  const getProducts = async id => {\n    try {\n      const productsResponse = await fetch(\"/stocktake/\", {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const productsResult = await productsResponse.json();\n      setProducts(productsResult.rows);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }; //create a new record for the product passed in as params.\n\n\n  const createRecord = id => {\n    try {\n      const stockId = localStorage.getItem(\"stocktake\");\n      const body = {\n        id,\n        stockId\n      };\n      fetch(\"/stocktake/generate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n    } catch (error) {\n      console.error(error.message);\n    }\n  }; //Creates a new record in the stocktake table, and new stocktake records for each product.\n\n\n  const newStocktake = async () => {\n    //check a stocktake is not already in progress\n    if (!stocktake && stocktake_id === null) {\n      try {\n        //insert new record into stocktake table\n        const response = await fetch(\"/stocktake/new\", {\n          method: \"POST\",\n          headers: {\n            token: localStorage.token\n          }\n        });\n        const result = await response.json(); //set stocktake and stocktakedate in local storage\n\n        localStorage.setItem(\"stocktake\", result.rows[0].stocktake_id);\n        localStorage.setItem(\"stocktakedate\", result.rows[0].stocktake_date); //create a new record for each product\n\n        products.forEach(product => {\n          createRecord(product.product_stocklist_id);\n        });\n      } catch (err) {\n        console.log(err.message);\n      } //set stocktake boolean to true\n\n\n      setStocktake(true);\n    }\n  };\n\n  const getLists = async () => {\n    try {\n      const response = await fetch(\"/stocklists/\", {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseData = await response.json();\n      setLists(parseData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const checkAllCounted = async () => {\n    try {\n      const response = await fetch(\"/stocklists/inprogress\", {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseData = await response.json();\n\n      if (parseData.length > 0) {\n        setAllCounted(false);\n      } else {\n        setAllCounted(true);\n      }\n    } catch (error) {}\n  }; //CALCULATING AND WRITING SALES TO THE DATABASE AFTER STOCKTAKE HAS ENDED \n  //get a list of distinct products for caluculating sales\n\n\n  const getDistinctProducts = async () => {\n    try {\n      const response = await fetch(\"/products/get/distinct\", {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseRes = await response.json();\n      setDistinctProducts(parseRes);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }; //get the sales data, wait for promise to resolve then write to the database in sales_record table\n\n\n  const getAndWriteSalesNumbers = async products => {\n    var promises = products.map(product => {\n      return getSalesData(product.product_id, Number(currentStocktake), Number(currentStocktake) + 1);\n    });\n    promises.forEach(promise => {\n      promise.then(result => {\n        writeSales(result.product_id, result.sales, stocktake_id);\n      });\n    });\n  }; //write the sales numbers into the db\n\n\n  const writeSales = (product_id, sales, stocktake) => {\n    try {\n      const body = {\n        product_id,\n        sales,\n        stocktake\n      };\n      fetch(\"/inventory/writesales\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n    } catch (error) {\n      console.error(error.message);\n    }\n  }; //get sales data\n\n\n  const getSalesData = async (product, prevStocktake, currentStocktake) => {\n    try {\n      const body = {\n        prevStocktake,\n        currentStocktake,\n        product\n      };\n      const response = await fetch(`/inventory/sales`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      return await response.json();\n    } catch (error) {\n      console.error(error.message);\n    }\n  }; //onclick for end stocktake button\n\n\n  const endStocktake = e => {\n    setListsChange(true);\n\n    if (allCounted) {\n      e.preventDefault();\n      setStocktakeInactive();\n      localStorage.setItem(\"laststocktake\", localStorage.getItem(\"stocktake\"));\n      localStorage.removeItem(\"stocktake\");\n      localStorage.removeItem(\"stocktakedate\");\n      setStocktake(false);\n      toast.success(\"Stocktake ended\");\n      getAndWriteSalesNumbers(distinctProducts);\n    } else {\n      toast.warning(\"Not all counts have been completed\");\n    }\n  }; //set stocktake as inactive in db\n\n\n  const setStocktakeInactive = async () => {\n    try {\n      const body = {\n        stocktake_id\n      };\n      const response = await fetch(\"/stocktake/inactive\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      await response.json();\n    } catch (error) {\n      console.error(error.message);\n    }\n  }; //logout onclick\n\n\n  const logout = e => {\n    e.preventDefault();\n    localStorage.removeItem(\"token\");\n    setAuth(false);\n    toast.success(\"Logged out succsessfully!\");\n  };\n\n  useEffect(() => {\n    getDistinctProducts();\n    checkAllCounted();\n    getProducts();\n    checkStocktake();\n    getLists();\n    setListsChange(false);\n\n    if (products.length > 0) {\n      console.log(products);\n    }\n  }, [listsChange]);\n  return !stocktake_id ? /*#__PURE__*/React.createElement(\"main\", {\n    role: \"main\",\n    className: \"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jumbotron\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary float-right\",\n    onClick: e => logout(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, \"Logout\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 11\n    }\n  }, \"Stocktake\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }\n  }, \"Create a new stocktaking record for \", dateString, \"?\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-info\",\n    onClick: newStocktake,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, \"Start Stocktake\")))) : /*#__PURE__*/React.createElement(\"main\", {\n    role: \"main\",\n    className: \"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jumbotron\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-danger float-right\",\n    onClick: e => endStocktake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }\n  }, \"End Stocktake\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 11\n    }\n  }, \"Stocktake\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }\n  }, \"Stocktake in progress :\", \" \", /*#__PURE__*/React.createElement(Moment, {\n    date: localStorage.getItem(\"stocktakedate\"),\n    format: \"DD/MM/YYYY HH:mm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ShowLists, {\n    allLists: allLists,\n    setListsChange: setListsChange,\n    stocktake: stocktake,\n    stocktake_id: stocktake_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default StocktakeLists;","map":{"version":3,"sources":["C:/Users/alans/bevstock/client/src/components/stocktaking/StocktakeLists.js"],"names":["React","useState","useEffect","Moment","toast","ShowLists","StocktakeLists","setAuth","stocktake","setStocktake","allLists","setLists","listsChange","setListsChange","products","setProducts","allCounted","setAllCounted","distinctProducts","setDistinctProducts","currentStocktake","localStorage","getItem","dateString","Date","toString","stocktake_id","checkStocktake","getProducts","id","productsResponse","fetch","method","headers","token","productsResult","json","rows","error","console","message","createRecord","stockId","body","JSON","stringify","newStocktake","response","result","setItem","stocktake_date","forEach","product","product_stocklist_id","err","log","getLists","parseData","checkAllCounted","length","getDistinctProducts","parseRes","getAndWriteSalesNumbers","promises","map","getSalesData","product_id","Number","promise","then","writeSales","sales","prevStocktake","endStocktake","e","preventDefault","setStocktakeInactive","removeItem","success","warning","logout"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,SAASC,KAAT,QAAsB,gBAAtB,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACtC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,QAAD,EAAWC,QAAX,IAAuBV,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACiB,gBAAD,EAAmBC,mBAAnB,IAA0ClB,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAMmB,gBAAgB,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAzB;AACA,QAAMC,UAAU,GAAGC,IAAI,GAAGC,QAAP,EAAnB;AAEA,QAAMC,YAAY,GAAGL,YAAY,CAACC,OAAb,CAAqB,WAArB,CAArB;;AAEA,QAAMK,cAAc,GAAG,MAAM;AAC3B,QAAID,YAAY,KAAK,IAArB,EAA2B;AACzBjB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GAJD;;AAMA,QAAMmB,WAAW,GAAG,MAAOC,EAAP,IAAc;AAChC,QAAI;AACF,YAAMC,gBAAgB,GAAG,MAAMC,KAAK,CAAC,aAAD,EAAgB;AAClDC,QAAAA,MAAM,EAAE,KAD0C;AAElDC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEb,YAAY,CAACa;AAAtB;AAFyC,OAAhB,CAApC;AAIA,YAAMC,cAAc,GAAG,MAAML,gBAAgB,CAACM,IAAjB,EAA7B;AACArB,MAAAA,WAAW,CAACoB,cAAc,CAACE,IAAhB,CAAX;AACD,KAPD,CAOE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD;AACF,GAXD,CAlBsC,CA+BtC;;;AACA,QAAMC,YAAY,GAAIZ,EAAD,IAAQ;AAC3B,QAAI;AACF,YAAMa,OAAO,GAAGrB,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAhB;AACA,YAAMqB,IAAI,GAAG;AAAEd,QAAAA,EAAF;AAAMa,QAAAA;AAAN,OAAb;AAEAX,MAAAA,KAAK,CAAC,qBAAD,EAAwB;AAC3BC,QAAAA,MAAM,EAAE,MADmB;AAE3BC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFkB;AAG3BU,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeF,IAAf;AAHqB,OAAxB,CAAL;AAKD,KATD,CASE,OAAOL,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD;AACF,GAbD,CAhCsC,CA+CtC;;;AACA,QAAMM,YAAY,GAAG,YAAY;AAC/B;AACA,QAAI,CAACtC,SAAD,IAAckB,YAAY,KAAK,IAAnC,EAAyC;AACvC,UAAI;AACF;AACA,cAAMqB,QAAQ,GAAG,MAAMhB,KAAK,CAAC,gBAAD,EAAmB;AAC7CC,UAAAA,MAAM,EAAE,MADqC;AAE7CC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,KAAK,EAAEb,YAAY,CAACa;AAAtB;AAFoC,SAAnB,CAA5B;AAIA,cAAMc,MAAM,GAAG,MAAMD,QAAQ,CAACX,IAAT,EAArB,CANE,CAOF;;AACAf,QAAAA,YAAY,CAAC4B,OAAb,CAAqB,WAArB,EAAkCD,MAAM,CAACX,IAAP,CAAY,CAAZ,EAAeX,YAAjD;AACAL,QAAAA,YAAY,CAAC4B,OAAb,CAAqB,eAArB,EAAsCD,MAAM,CAACX,IAAP,CAAY,CAAZ,EAAea,cAArD,EATE,CAUF;;AACApC,QAAAA,QAAQ,CAACqC,OAAT,CAAkBC,OAAD,IAAa;AAC5BX,UAAAA,YAAY,CAACW,OAAO,CAACC,oBAAT,CAAZ;AACD,SAFD;AAGD,OAdD,CAcE,OAAOC,GAAP,EAAY;AACZf,QAAAA,OAAO,CAACgB,GAAR,CAAYD,GAAG,CAACd,OAAhB;AACD,OAjBsC,CAkBvC;;;AACA/B,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GAvBD;;AAyBA,QAAM+C,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMT,QAAQ,GAAG,MAAMhB,KAAK,CAAC,cAAD,EAAiB;AAC3CC,QAAAA,MAAM,EAAE,KADmC;AAE3CC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEb,YAAY,CAACa;AAAtB;AAFkC,OAAjB,CAA5B;AAKA,YAAMuB,SAAS,GAAG,MAAMV,QAAQ,CAACX,IAAT,EAAxB;AACAzB,MAAAA,QAAQ,CAAC8C,SAAD,CAAR;AACD,KARD,CAQE,OAAOH,GAAP,EAAY;AACZf,MAAAA,OAAO,CAACD,KAAR,CAAcgB,GAAG,CAACd,OAAlB;AACD;AACF,GAZD;;AAcA,QAAMkB,eAAe,GAAG,YAAY;AAClC,QAAI;AACF,YAAMX,QAAQ,GAAG,MAAMhB,KAAK,CAC1B,wBAD0B,EAE1B;AACEC,QAAAA,MAAM,EAAE,KADV;AAEEC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEb,YAAY,CAACa;AAAtB;AAFX,OAF0B,CAA5B;AAQA,YAAMuB,SAAS,GAAG,MAAMV,QAAQ,CAACX,IAAT,EAAxB;;AAEA,UAAIqB,SAAS,CAACE,MAAV,GAAmB,CAAvB,EAA0B;AACxB1C,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD,OAFD,MAEO;AACLA,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,KAhBD,CAgBE,OAAOqB,KAAP,EAAc,CAAE;AACnB,GAlBD,CAvFsC,CA4GtC;AAEE;;;AACA,QAAMsB,mBAAmB,GAAG,YAAY;AACtC,QAAI;AACF,YAAMb,QAAQ,GAAG,MAAMhB,KAAK,CAC1B,wBAD0B,EAE1B;AACEC,QAAAA,MAAM,EAAE,KADV;AAEEC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEb,YAAY,CAACa;AAAtB;AAFX,OAF0B,CAA5B;AAOA,YAAM2B,QAAQ,GAAG,MAAMd,QAAQ,CAACX,IAAT,EAAvB;AACAjB,MAAAA,mBAAmB,CAAC0C,QAAD,CAAnB;AACD,KAVD,CAUE,OAAOvB,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD;AACF,GAdD,CA/GoC,CA+HpC;;;AACA,QAAMsB,uBAAuB,GAAG,MAAOhD,QAAP,IAAoB;AAClD,QAAIiD,QAAQ,GAAGjD,QAAQ,CAACkD,GAAT,CAAcZ,OAAD,IAAa;AACvC,aAAOa,YAAY,CAACb,OAAO,CAACc,UAAT,EAAqBC,MAAM,CAAC/C,gBAAD,CAA3B,EAA+C+C,MAAM,CAAC/C,gBAAD,CAAN,GAAyB,CAAxE,CAAnB;AACD,KAFc,CAAf;AAGA2C,IAAAA,QAAQ,CAACZ,OAAT,CAAkBiB,OAAD,IAAa;AAC5BA,MAAAA,OAAO,CAACC,IAAR,CAAcrB,MAAD,IAAY;AACvBsB,QAAAA,UAAU,CAACtB,MAAM,CAACkB,UAAR,EAAoBlB,MAAM,CAACuB,KAA3B,EAAkC7C,YAAlC,CAAV;AACD,OAFD;AAGD,KAJD;AAKD,GATD,CAhIoC,CA2ItC;;;AACA,QAAM4C,UAAU,GAAG,CAACJ,UAAD,EAAaK,KAAb,EAAoB/D,SAApB,KAAkC;AACnD,QAAI;AACF,YAAMmC,IAAI,GAAG;AAAEuB,QAAAA,UAAF;AAAcK,QAAAA,KAAd;AAAqB/D,QAAAA;AAArB,OAAb;AACAuB,MAAAA,KAAK,CAAC,uBAAD,EAA0B;AAC7BC,QAAAA,MAAM,EAAE,MADqB;AAE7BC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFoB;AAG7BU,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeF,IAAf;AAHuB,OAA1B,CAAL;AAKD,KAPD,CAOE,OAAOL,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD;AACF,GAXD,CA5IsC,CAyJtC;;;AACA,QAAMyB,YAAY,GAAG,OAAOb,OAAP,EAAgBoB,aAAhB,EAA+BpD,gBAA/B,KAAoD;AACvE,QAAI;AACF,YAAMuB,IAAI,GAAG;AAAE6B,QAAAA,aAAF;AAAiBpD,QAAAA,gBAAjB;AAAmCgC,QAAAA;AAAnC,OAAb;AACA,YAAML,QAAQ,GAAG,MAAMhB,KAAK,CAAE,kBAAF,EAAqB;AAC/CC,QAAAA,MAAM,EAAE,MADuC;AAE/CC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFsC;AAG/CU,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeF,IAAf;AAHyC,OAArB,CAA5B;AAKA,aAAO,MAAMI,QAAQ,CAACX,IAAT,EAAb;AACD,KARD,CAQE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD;AACF,GAZD,CA1JsC,CAwKtC;;;AACA,QAAMiC,YAAY,GAAIC,CAAD,IAAO;AAC1B7D,IAAAA,cAAc,CAAC,IAAD,CAAd;;AACA,QAAIG,UAAJ,EAAgB;AACd0D,MAAAA,CAAC,CAACC,cAAF;AACAC,MAAAA,oBAAoB;AACpBvD,MAAAA,YAAY,CAAC4B,OAAb,CAAqB,eAArB,EAAsC5B,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAtC;AACAD,MAAAA,YAAY,CAACwD,UAAb,CAAwB,WAAxB;AACAxD,MAAAA,YAAY,CAACwD,UAAb,CAAwB,eAAxB;AACApE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAL,MAAAA,KAAK,CAAC0E,OAAN,CAAc,iBAAd;AACAhB,MAAAA,uBAAuB,CAAC5C,gBAAD,CAAvB;AACD,KATD,MASO;AACLd,MAAAA,KAAK,CAAC2E,OAAN,CAAc,oCAAd;AACD;AACF,GAdD,CAzKsC,CAyLtC;;;AACA,QAAMH,oBAAoB,GAAG,YAAY;AACvC,QAAI;AACF,YAAMjC,IAAI,GAAG;AAAEjB,QAAAA;AAAF,OAAb;AACA,YAAMqB,QAAQ,GAAG,MAAMhB,KAAK,CAAC,qBAAD,EAAwB;AAClDC,QAAAA,MAAM,EAAE,MAD0C;AAElDC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFyC;AAGlDU,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeF,IAAf;AAH4C,OAAxB,CAA5B;AAKA,YAAMI,QAAQ,CAACX,IAAT,EAAN;AACD,KARD,CAQE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD;AACF,GAZD,CA1LsC,CAwMtC;;;AACA,QAAMwC,MAAM,GAAIN,CAAD,IAAO;AACpBA,IAAAA,CAAC,CAACC,cAAF;AACAtD,IAAAA,YAAY,CAACwD,UAAb,CAAwB,OAAxB;AACAtE,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAH,IAAAA,KAAK,CAAC0E,OAAN,CAAc,2BAAd;AACD,GALD;;AAOA5E,EAAAA,SAAS,CAAC,MAAM;AACd0D,IAAAA,mBAAmB;AACnBF,IAAAA,eAAe;AACf9B,IAAAA,WAAW;AACXD,IAAAA,cAAc;AACd6B,IAAAA,QAAQ;AACR3C,IAAAA,cAAc,CAAC,KAAD,CAAd;;AACA,QAAIC,QAAQ,CAAC6C,MAAT,GAAkB,CAAtB,EAAyB;AACvBpB,MAAAA,OAAO,CAACgB,GAAR,CAAYzC,QAAZ;AACD;AACF,GAVQ,EAUN,CAACF,WAAD,CAVM,CAAT;AAYA,SAAO,CAACc,YAAD,gBACL;AAAM,IAAA,IAAI,EAAC,MAAX;AAAkB,IAAA,SAAS,EAAC,yCAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,6BADZ;AAEE,IAAA,OAAO,EAAGgD,CAAD,IAAOM,MAAM,CAACN,CAAD,CAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAyCnD,UAAzC,MAFF,eAGE;AAAQ,IAAA,SAAS,EAAC,cAAlB;AAAiC,IAAA,OAAO,EAAEuB,YAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAHF,CAPF,CADF,CADK,gBAmBL;AAAM,IAAA,IAAI,EAAC,MAAX;AAAkB,IAAA,SAAS,EAAC,yCAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,4BADZ;AAEE,IAAA,OAAO,EAAG4B,CAAD,IAAOD,YAAY,CAACC,CAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAOE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAC0B,GAD1B,eAEE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAErD,YAAY,CAACC,OAAb,CAAqB,eAArB,CADR;AAEE,IAAA,MAAM,EAAC,kBAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,CAPF,CADF,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,QAAQ,EAAEZ,QADZ;AAEE,IAAA,cAAc,EAAEG,cAFlB;AAGE,IAAA,SAAS,EAAEL,SAHb;AAIE,IAAA,YAAY,EAAEkB,YAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAnBF,CAnBF;AAgDD,CA5QD;;AA8QA,eAAepB,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Moment from \"react-moment\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\n//components\r\nimport ShowLists from \"./ShowLists\";\r\n\r\nconst StocktakeLists = ({ setAuth }) => {\r\n  const [stocktake, setStocktake] = useState(false);\r\n  const [allLists, setLists] = useState([]);\r\n  const [listsChange, setListsChange] = useState(false);\r\n  const [products, setProducts] = useState([]);\r\n  const [allCounted, setAllCounted] = useState(false);\r\n  const [distinctProducts, setDistinctProducts] = useState([]);\r\n  const currentStocktake = localStorage.getItem(\"laststocktake\");\r\n  const dateString = Date().toString();\r\n\r\n  const stocktake_id = localStorage.getItem(\"stocktake\");\r\n\r\n  const checkStocktake = () => {\r\n    if (stocktake_id !== null) {\r\n      setStocktake(true);\r\n    }\r\n  };\r\n\r\n  const getProducts = async (id) => {\r\n    try {\r\n      const productsResponse = await fetch(\"/stocktake/\", {\r\n        method: \"GET\",\r\n        headers: { token: localStorage.token },\r\n      });\r\n      const productsResult = await productsResponse.json();\r\n      setProducts(productsResult.rows);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  //create a new record for the product passed in as params.\r\n  const createRecord = (id) => {\r\n    try {\r\n      const stockId = localStorage.getItem(\"stocktake\");\r\n      const body = { id, stockId };\r\n\r\n      fetch(\"/stocktake/generate\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  //Creates a new record in the stocktake table, and new stocktake records for each product.\r\n  const newStocktake = async () => {\r\n    //check a stocktake is not already in progress\r\n    if (!stocktake && stocktake_id === null) {\r\n      try {\r\n        //insert new record into stocktake table\r\n        const response = await fetch(\"/stocktake/new\", {\r\n          method: \"POST\",\r\n          headers: { token: localStorage.token },\r\n        });\r\n        const result = await response.json();\r\n        //set stocktake and stocktakedate in local storage\r\n        localStorage.setItem(\"stocktake\", result.rows[0].stocktake_id);\r\n        localStorage.setItem(\"stocktakedate\", result.rows[0].stocktake_date);\r\n        //create a new record for each product\r\n        products.forEach((product) => {\r\n          createRecord(product.product_stocklist_id);\r\n        });\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n      //set stocktake boolean to true\r\n      setStocktake(true);\r\n    }\r\n  };\r\n\r\n  const getLists = async () => {\r\n    try {\r\n      const response = await fetch(\"/stocklists/\", {\r\n        method: \"GET\",\r\n        headers: { token: localStorage.token },\r\n      });\r\n\r\n      const parseData = await response.json();\r\n      setLists(parseData);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const checkAllCounted = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"/stocklists/inprogress\",\r\n        {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        }\r\n      );\r\n\r\n      const parseData = await response.json();\r\n\r\n      if (parseData.length > 0) {\r\n        setAllCounted(false);\r\n      } else {\r\n        setAllCounted(true);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n\r\n  //CALCULATING AND WRITING SALES TO THE DATABASE AFTER STOCKTAKE HAS ENDED \r\n\r\n    //get a list of distinct products for caluculating sales\r\n    const getDistinctProducts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"/products/get/distinct\",\r\n          {\r\n            method: \"GET\",\r\n            headers: { token: localStorage.token },\r\n          }\r\n        );\r\n        const parseRes = await response.json();\r\n        setDistinctProducts(parseRes);\r\n      } catch (error) {\r\n        console.error(error.message);\r\n      }\r\n    };\r\n\r\n    //get the sales data, wait for promise to resolve then write to the database in sales_record table\r\n    const getAndWriteSalesNumbers = async (products) => {\r\n      var promises = products.map((product) => {\r\n        return getSalesData(product.product_id, Number(currentStocktake), Number(currentStocktake)+1);\r\n      });\r\n      promises.forEach((promise) => {\r\n        promise.then((result) => {\r\n          writeSales(result.product_id, result.sales, stocktake_id);\r\n        });\r\n      });\r\n    };\r\n\r\n  //write the sales numbers into the db\r\n  const writeSales = (product_id, sales, stocktake) => {\r\n    try {\r\n      const body = { product_id, sales, stocktake };\r\n      fetch(\"/inventory/writesales\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  //get sales data\r\n  const getSalesData = async (product, prevStocktake, currentStocktake) => {\r\n    try {\r\n      const body = { prevStocktake, currentStocktake, product };\r\n      const response = await fetch(`/inventory/sales`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  //onclick for end stocktake button\r\n  const endStocktake = (e) => {\r\n    setListsChange(true);\r\n    if (allCounted) {\r\n      e.preventDefault();\r\n      setStocktakeInactive();\r\n      localStorage.setItem(\"laststocktake\", localStorage.getItem(\"stocktake\"));\r\n      localStorage.removeItem(\"stocktake\");\r\n      localStorage.removeItem(\"stocktakedate\");\r\n      setStocktake(false);\r\n      toast.success(\"Stocktake ended\");\r\n      getAndWriteSalesNumbers(distinctProducts);\r\n    } else {\r\n      toast.warning(\"Not all counts have been completed\");\r\n    }\r\n  };\r\n\r\n  //set stocktake as inactive in db\r\n  const setStocktakeInactive = async () => {\r\n    try {\r\n      const body = { stocktake_id };\r\n      const response = await fetch(\"/stocktake/inactive\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n      await response.json();\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  //logout onclick\r\n  const logout = (e) => {\r\n    e.preventDefault();\r\n    localStorage.removeItem(\"token\");\r\n    setAuth(false);\r\n    toast.success(\"Logged out succsessfully!\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDistinctProducts();\r\n    checkAllCounted();\r\n    getProducts();\r\n    checkStocktake();\r\n    getLists();\r\n    setListsChange(false);\r\n    if (products.length > 0) {\r\n      console.log(products);\r\n    }\r\n  }, [listsChange]);\r\n\r\n  return !stocktake_id ? (\r\n    <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\">\r\n      <div className=\"jumbotron\">\r\n        <button\r\n          className=\"btn btn-primary float-right\"\r\n          onClick={(e) => logout(e)}\r\n        >\r\n          Logout\r\n        </button>\r\n        <div className=\"container\">\r\n          <h1 className=\"display-3\">Stocktake</h1>\r\n          <h4>Create a new stocktaking record for {dateString}?</h4>\r\n          <button className=\"btn btn-info\" onClick={newStocktake}>\r\n            Start Stocktake\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  ) : (\r\n    <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\">\r\n      <div className=\"jumbotron\">\r\n        <button\r\n          className=\"btn btn-danger float-right\"\r\n          onClick={(e) => endStocktake(e)}\r\n        >\r\n          End Stocktake\r\n        </button>\r\n        <div className=\"container\">\r\n          <h1 className=\"display-3\">Stocktake</h1>\r\n          <h4>\r\n            Stocktake in progress :{\" \"}\r\n            <Moment\r\n              date={localStorage.getItem(\"stocktakedate\")}\r\n              format=\"DD/MM/YYYY HH:mm\"\r\n            />\r\n          </h4>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <ShowLists\r\n          allLists={allLists}\r\n          setListsChange={setListsChange}\r\n          stocktake={stocktake}\r\n          stocktake_id={stocktake_id}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default StocktakeLists;\r\n"]},"metadata":{},"sourceType":"module"}