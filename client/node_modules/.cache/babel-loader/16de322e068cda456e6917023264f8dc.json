{"ast":null,"code":"const {\n  default: Test2\n} = require(\"./test2\");\n\nfunction isPushNotificationSupported() {\n  return \"serviceWorker\" in navigator && \"PushManager\" in window;\n}\n\nfunction registerServiceWorker() {\n  return navigator.serviceWorker.register(\"/sw.js\");\n}\n\nasync function askUserPermission() {\n  return await Notification.requestPermission();\n}\n\nasync function createNotificationSubscription() {\n  //wait for service worker installation to be ready\n  const serviceWorker = await navigator.serviceWorker.ready; // subscribe and return the subscription\n\n  return await serviceWorker.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: pushServerPublicKey\n  });\n}\n\ncreateNotificationSubscription();","map":{"version":3,"sources":["C:/Users/alans/bevstock/client/src/components/Test.js"],"names":["default","Test2","require","isPushNotificationSupported","navigator","window","registerServiceWorker","serviceWorker","register","askUserPermission","Notification","requestPermission","createNotificationSubscription","ready","pushManager","subscribe","userVisibleOnly","applicationServerKey","pushServerPublicKey"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,OAAO,EAAEC;AAAX,IAAqBC,OAAO,CAAC,SAAD,CAAlC;;AAEA,SAASC,2BAAT,GAAuC;AACrC,SAAO,mBAAmBC,SAAnB,IAAgC,iBAAiBC,MAAxD;AACD;;AAED,SAASC,qBAAT,GAAiC;AAC/B,SAAOF,SAAS,CAACG,aAAV,CAAwBC,QAAxB,CAAiC,QAAjC,CAAP;AACD;;AAED,eAAeC,iBAAf,GAAmC;AACjC,SAAO,MAAMC,YAAY,CAACC,iBAAb,EAAb;AACD;;AAED,eAAeC,8BAAf,GAAgD;AAC9C;AACA,QAAML,aAAa,GAAG,MAAMH,SAAS,CAACG,aAAV,CAAwBM,KAApD,CAF8C,CAG9C;;AACA,SAAO,MAAMN,aAAa,CAACO,WAAd,CAA0BC,SAA1B,CAAoC;AAC/CC,IAAAA,eAAe,EAAE,IAD8B;AAE/CC,IAAAA,oBAAoB,EAAEC;AAFyB,GAApC,CAAb;AAID;;AAEDN,8BAA8B","sourcesContent":["const { default: Test2 } = require(\"./test2\");\r\n\r\nfunction isPushNotificationSupported() {\r\n  return \"serviceWorker\" in navigator && \"PushManager\" in window;\r\n}\r\n\r\nfunction registerServiceWorker() {\r\n  return navigator.serviceWorker.register(\"/sw.js\");\r\n}\r\n\r\nasync function askUserPermission() {\r\n  return await Notification.requestPermission();\r\n}\r\n\r\nasync function createNotificationSubscription() {\r\n  //wait for service worker installation to be ready\r\n  const serviceWorker = await navigator.serviceWorker.ready;\r\n  // subscribe and return the subscription\r\n  return await serviceWorker.pushManager.subscribe({\r\n    userVisibleOnly: true,\r\n    applicationServerKey: pushServerPublicKey\r\n  });\r\n}\r\n\r\ncreateNotificationSubscription();"]},"metadata":{},"sourceType":"module"}