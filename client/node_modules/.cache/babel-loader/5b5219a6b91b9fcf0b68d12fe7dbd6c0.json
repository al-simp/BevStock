{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alans\\\\bevstock\\\\client\\\\src\\\\components\\\\stocktaking\\\\Count.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Dropdown from \"./Dropdown\";\nimport CountModal from \"./CountModal\";\nimport _ from \"lodash\";\nimport StocklistProduct from \"./StocklistProduct\";\n\nconst Count = props => {\n  const [name, setName] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [productsChange, setProductsChange] = useState(false);\n  const [quantity, setQuantity] = useState(0); // get the list id from the url params\n\n  const id = props.match.params.id; //get stocktake id from the url params\n\n  const stocktake = props.match.params.stocktakeid; //get list name using list id\n\n  const getName = async id => {\n    try {\n      const response = await fetch(`http://localhost:5000/stocklists/get/${id}`, {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseRes = await response.json(); // API call returns an array of length 1,so get 1st value\n\n      setName(parseRes.rows[0].stocklist_name);\n    } catch (err) {\n      console.error(err.message);\n    }\n  }; //get products on list and initialise quantities\n\n\n  const getProducts = async id => {\n    try {\n      const response = await fetch(`http://localhost:5000/stocklists/list/${id}`, {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseRes = await response.json();\n      console.log(parseRes);\n      setProducts(parseRes);\n      console.log(products);\n    } catch (err) {\n      console.error(err.message);\n    }\n  }; //delete a product from list\n\n\n  const deleteProduct = async id => {\n    try {\n      await fetch(`http://localhost:5000/stocklists/deleteproduct/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n    } catch (err) {\n      console.error(err.message);\n    }\n\n    setProductsChange(true);\n  };\n\n  useEffect(() => {\n    getName(id);\n    getProducts(id);\n  }, [productsChange, quantity]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    role: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jumbotron\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, name), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    listId: id,\n    setProductsChange: setProductsChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  })), products.map(product => /*#__PURE__*/React.createElement(StocklistProduct, {\n    id: product.product_stocklist_id,\n    name: product.product_name,\n    quantity: quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default Count;","map":{"version":3,"sources":["C:/Users/alans/bevstock/client/src/components/stocktaking/Count.js"],"names":["React","Fragment","useState","useEffect","Dropdown","CountModal","_","StocklistProduct","Count","props","name","setName","products","setProducts","productsChange","setProductsChange","quantity","setQuantity","id","match","params","stocktake","stocktakeid","getName","response","fetch","method","headers","token","localStorage","parseRes","json","rows","stocklist_name","err","console","error","message","getProducts","log","deleteProduct","map","product","product_stocklist_id","product_name"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport CountModal from \"./CountModal\";\r\nimport _ from \"lodash\";\r\nimport StocklistProduct from \"./StocklistProduct\";\r\n\r\nconst Count = (props) => {\r\n  const [name, setName] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [productsChange, setProductsChange] = useState(false);\r\n  const [quantity, setQuantity] = useState(0);\r\n\r\n  // get the list id from the url params\r\n  const id = props.match.params.id;\r\n\r\n  //get stocktake id from the url params\r\n  const stocktake = props.match.params.stocktakeid;\r\n\r\n  //get list name using list id\r\n  const getName = async (id) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/stocklists/get/${id}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        }\r\n      );\r\n\r\n      const parseRes = await response.json();\r\n\r\n      // API call returns an array of length 1,so get 1st value\r\n      setName(parseRes.rows[0].stocklist_name);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  //get products on list and initialise quantities\r\n  const getProducts = async (id) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/stocklists/list/${id}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        }\r\n      );\r\n\r\n      const parseRes = await response.json();\r\n\r\n      console.log(parseRes);\r\n      setProducts(parseRes);\r\n\r\n      console.log(products);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  //delete a product from list\r\n  const deleteProduct = async (id) => {\r\n    try {\r\n      await fetch(`http://localhost:5000/stocklists/deleteproduct/${id}`, {\r\n        method: \"DELETE\",\r\n        headers: { token: localStorage.token },\r\n      });\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n\r\n    setProductsChange(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getName(id);\r\n    getProducts(id);\r\n  }, [productsChange, quantity]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <main role=\"main\">\r\n        <div className=\"jumbotron\">\r\n          <h1 className=\"display-3\">{name}</h1>\r\n          <div>\r\n            <Dropdown listId={id} setProductsChange={setProductsChange} />\r\n          </div>\r\n          {products.map(product => (\r\n            <StocklistProduct id={product.product_stocklist_id} name={product.product_name} quantity={quantity}/>\r\n          ))}\r\n        </div>\r\n      </main>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Count;\r\n"]},"metadata":{},"sourceType":"module"}