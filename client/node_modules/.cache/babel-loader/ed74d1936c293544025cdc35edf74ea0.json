{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alans\\\\Bevstock\\\\client\\\\src\\\\components\\\\stocktaking\\\\Bottle.js\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Bottle = props => {\n  const [bottle, setBottle] = useState([]);\n  const {\n    id,\n    hasScanned,\n    hasResult\n  } = props;\n\n  const getBottle = async () => {\n    if (id !== null && !hasResult && !hasScanned) {\n      console.log(id);\n      hasScanned = true;\n\n      try {\n        const response = await fetch(`http://localhost:5000/products/${props.ID}`, {\n          method: \"GET\",\n          headers: {\n            token: localStorage.token\n          }\n        });\n        const parseData = await response.json();\n        console.log(parseData.length);\n\n        if (parseData.length < 0) {\n          setBottle(parseData);\n        }\n\n        hasResult = true;\n        console.log(parseData);\n      } catch (err) {\n        console.error(err.message);\n        hasScanned = false;\n      }\n    } else {\n      console.log(\"id not defined\");\n    }\n  };\n\n  useEffect(() => {\n    if (!hasResult) {\n      getBottle();\n    }\n  }, [id]);\n\n  if (bottle.length < 0) {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 10\n      }\n    }, bottle);\n  } else {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 12\n      }\n    }, \"No bottle found\");\n  }\n};\n\nexport default Bottle;","map":{"version":3,"sources":["C:/Users/alans/Bevstock/client/src/components/stocktaking/Bottle.js"],"names":["React","useEffect","useState","Bottle","props","bottle","setBottle","id","hasScanned","hasResult","getBottle","console","log","response","fetch","ID","method","headers","token","localStorage","parseData","json","length","err","error","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACxB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAM;AAAEK,IAAAA,EAAF;AAAMC,IAAAA,UAAN;AAAkBC,IAAAA;AAAlB,MAAgCL,KAAtC;;AAGA,QAAMM,SAAS,GAAG,YAAY;AAE5B,QAAIH,EAAE,KAAK,IAAP,IAAe,CAACE,SAAhB,IAA6B,CAACD,UAAlC,EAA8C;AAC1CG,MAAAA,OAAO,CAACC,GAAR,CAAYL,EAAZ;AACAC,MAAAA,UAAU,GAAG,IAAb;;AACF,UAAI;AACF,cAAMK,QAAQ,GAAG,MAAMC,KAAK,CACzB,kCAAiCV,KAAK,CAACW,EAAG,EADjB,EAE1B;AACEC,UAAAA,MAAM,EAAE,KADV;AAEEC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,KAAK,EAAEC,YAAY,CAACD;AAAtB;AAFX,SAF0B,CAA5B;AAQA,cAAME,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAxB;AACAV,QAAAA,OAAO,CAACC,GAAR,CAAYQ,SAAS,CAACE,MAAtB;;AACA,YAAIF,SAAS,CAACE,MAAV,GAAmB,CAAvB,EAA0B;AAC1BhB,UAAAA,SAAS,CAACc,SAAD,CAAT;AACC;;AACDX,QAAAA,SAAS,GAAG,IAAZ;AAEAE,QAAAA,OAAO,CAACC,GAAR,CAAYQ,SAAZ;AACD,OAjBD,CAiBE,OAAOG,GAAP,EAAY;AACZZ,QAAAA,OAAO,CAACa,KAAR,CAAcD,GAAG,CAACE,OAAlB;AACAjB,QAAAA,UAAU,GAAG,KAAb;AACD;AACF,KAxBD,MAwBO;AACLG,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;AACF,GA7BD;;AA+BAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACQ,SAAL,EAAgB;AAClBC,MAAAA,SAAS;AACN;AACJ,GAJQ,EAIN,CAACH,EAAD,CAJM,CAAT;;AAMA,MAAIF,MAAM,CAACiB,MAAP,GAAgB,CAApB,EAAuB;AAEvB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKjB,MAAL,CAAP;AAEC,GAJD,MAIO;AAEL,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAP;AAED;AACF,CApDD;;AAsDA,eAAeF,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst Bottle = (props) => {\r\n  const [bottle, setBottle] = useState([]);\r\n\r\n  const { id, hasScanned, hasResult } = props\r\n\r\n\r\n  const getBottle = async () => {\r\n    \r\n    if (id !== null && !hasResult && !hasScanned) {\r\n        console.log(id);\r\n        hasScanned = true;\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:5000/products/${props.ID}`,\r\n          {\r\n            method: \"GET\",\r\n            headers: { token: localStorage.token },\r\n          }\r\n        );\r\n\r\n        const parseData = await response.json();\r\n        console.log(parseData.length);\r\n        if (parseData.length < 0) {\r\n        setBottle(parseData);\r\n        }\r\n        hasResult = true;\r\n\r\n        console.log(parseData);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        hasScanned = false;\r\n      }\r\n    } else {\r\n      console.log(\"id not defined\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n      if (!hasResult) {\r\n    getBottle();\r\n      }\r\n  }, [id]);\r\n\r\n  if (bottle.length < 0) {\r\n\r\n  return <h1>{bottle}</h1>;\r\n\r\n  } else { \r\n\r\n    return <h1>No bottle found</h1>\r\n\r\n  }\r\n};\r\n\r\nexport default Bottle;\r\n"]},"metadata":{},"sourceType":"module"}