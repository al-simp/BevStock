{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alans\\\\bevstock\\\\client\\\\src\\\\components\\\\stocktaking\\\\Count.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Dropdown from \"./Dropdown\";\nimport CountModal from \"./AddPartial\";\nimport _ from \"lodash\";\n\nconst Count = props => {\n  const [name, setName] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [productsChange, setProductsChange] = useState(false);\n  const [quantity, setQuantity] = useState(0); // get the list id from the url params\n\n  const id = props.match.params.id; //get stocktake id from the url params \n\n  const stocktake = props.match.params.stocktakeid;\n  console.log(stocktake); //get list name using list id\n\n  const getName = async id => {\n    try {\n      const response = await fetch(`http://localhost:5000/stocklists/get/${id}`, {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseRes = await response.json(); // API call returns an array of length 1,so get 1st value\n\n      setName(parseRes.rows[0].stocklist_name);\n    } catch (err) {\n      console.error(err.message);\n    }\n  }; //get products on list\n\n\n  const getProducts = async id => {\n    try {\n      const response = await fetch(`http://localhost:5000/stocklists/list/${id}`, {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseRes = await response.json();\n      setProducts(parseRes.map(product => ({\n        id: product.product_stocklist_id,\n        name: product.product_name,\n        quantity: quantity\n      })));\n      console.log(parseRes);\n    } catch (err) {\n      console.error(err.message);\n    }\n  }; //delete a product from list\n\n\n  const deleteProduct = async id => {\n    try {\n      await fetch(`http://localhost:5000/stocklists/deleteproduct/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n    } catch (err) {\n      console.error(err.message);\n    }\n\n    setProductsChange(true);\n  }; //get product quantities \n\n\n  const getQuantities = async id => {\n    try {\n      const quantity = 0;\n      const body = {\n        id,\n        stocktake\n      };\n      const response = await fetch(\"http://localhost:5000/stocklists/productquantity\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      const parseRes = await response.json;\n\n      if (parseRes) {\n        let quantity = parseRes;\n      } else {\n        let quantity = 0;\n      }\n\n      return quantity;\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  useEffect(() => {\n    getName(id);\n    getProducts(id);\n  }, [productsChange]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    role: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, name), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    listId: id,\n    setProductsChange: setProductsChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table mt-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, \"Product\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, \"Delete\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, \"Quantity\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, \"Count\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, products.map(product => /*#__PURE__*/React.createElement(\"tr\", {\n    key: product.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, product.name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-danger\",\n    onClick: () => deleteProduct(product.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 19\n    }\n  }, \"Delete\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, getQuantities(product.id)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CountModal, {\n    product: product,\n    setProductsChange: setProductsChange,\n    stocktakeid: stocktake,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 19\n    }\n  }))))))));\n};\n\nexport default Count;","map":{"version":3,"sources":["C:/Users/alans/bevstock/client/src/components/stocktaking/Count.js"],"names":["React","Fragment","useState","useEffect","Dropdown","CountModal","_","Count","props","name","setName","products","setProducts","productsChange","setProductsChange","quantity","setQuantity","id","match","params","stocktake","stocktakeid","console","log","getName","response","fetch","method","headers","token","localStorage","parseRes","json","rows","stocklist_name","err","error","message","getProducts","map","product","product_stocklist_id","product_name","deleteProduct","getQuantities","body","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport CountModal from \"./AddPartial\";\r\nimport _ from \"lodash\"; \r\n\r\n\r\n\r\n\r\nconst Count = (props) => {\r\n  const [name, setName] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [productsChange, setProductsChange] = useState(false);\r\n  const [quantity, setQuantity] = useState(0);\r\n\r\n  // get the list id from the url params\r\n  const id = props.match.params.id;\r\n\r\n  //get stocktake id from the url params \r\n  const stocktake = props.match.params.stocktakeid;\r\n\r\n  console.log(stocktake);\r\n\r\n  //get list name using list id\r\n  const getName = async (id) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/stocklists/get/${id}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        }\r\n      );\r\n\r\n      const parseRes = await response.json();\r\n\r\n      // API call returns an array of length 1,so get 1st value\r\n      setName(parseRes.rows[0].stocklist_name);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  //get products on list\r\n  const getProducts = async (id) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/stocklists/list/${id}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        }\r\n      );\r\n\r\n      const parseRes = await response.json();\r\n\r\n      setProducts(parseRes.map(product => ({ id: product.product_stocklist_id, name: product.product_name, quantity: quantity})));\r\n      console.log(parseRes);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  //delete a product from list\r\n  const deleteProduct = async (id) => {\r\n    try {\r\n      await fetch(`http://localhost:5000/stocklists/deleteproduct/${id}`, {\r\n        method: \"DELETE\",\r\n        headers: { token: localStorage.token },\r\n      });\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n\r\n    setProductsChange(true);\r\n  };\r\n\r\n  //get product quantities \r\n  const getQuantities = async (id) => {\r\n    try {\r\n      const quantity = 0;\r\n      const body = { id, stocktake }\r\n      const response = await fetch(\"http://localhost:5000/stocklists/productquantity\", {\r\n        method: \"GET\",\r\n        headers: { \"Content-Type\": \"application/json\" }, \r\n        body: JSON.stringify(body)\r\n      });\r\n      const parseRes = await response.json;\r\n      if (parseRes) {\r\n        let quantity = parseRes;\r\n      } else {\r\n        let quantity = 0;\r\n      }\r\n      return quantity;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    getName(id);\r\n    getProducts(id);\r\n  }, [productsChange]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <main role=\"main\">\r\n        <div className=\"container\">\r\n          <h1 className=\"display-3\">{name}</h1>\r\n          <div>\r\n            <Dropdown listId={id} setProductsChange={setProductsChange} />\r\n          </div>\r\n        </div>\r\n        <table className=\"table mt-5 text-center\">\r\n          <thead>\r\n            <tr>\r\n              <th>Product</th>\r\n              <th>Delete</th>\r\n              <th>Quantity</th>\r\n              <th>Count</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {products.map((product) => (\r\n              <tr key={product.id}>\r\n                <td>{product.name}</td>\r\n\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-danger\"\r\n                    onClick={() => deleteProduct(product.id)}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </td>\r\n                <td>\r\n              {getQuantities(product.id)}\r\n                </td>\r\n                <td>\r\n                  <CountModal product={product} setProductsChange={setProductsChange} stocktakeid={stocktake}/>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </main>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Count;\r\n"]},"metadata":{},"sourceType":"module"}