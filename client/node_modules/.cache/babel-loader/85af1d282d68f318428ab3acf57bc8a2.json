{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alans\\\\bevstock\\\\client\\\\src\\\\components\\\\TopSellerChart.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport _ from \"lodash\";\n\nconst TopSellerChart = ({\n  products,\n  currentStocktake,\n  prevStocktake,\n  setProducts\n}) => {\n  const [data, setData] = useState();\n  const [labels, setLabels] = useState([]);\n  const [productsChange, setProductsChange] = useState([]); // method to map through the products array, finding a sales figure for each product.\n\n  const getSales = async () => {\n    //mapping through the array performing getSalesData function for each product. \n    var promises = products.map(function (product) {\n      return getSalesData(product.product_id).then(function (results) {\n        product.rows = results;\n        return product;\n      });\n    }); // use promise.all to return resolved values\n\n    Promise.all(promises).then(function (results) {\n      //set products to top 5 sorted from highest to lowest.   \n      setProducts(results.sort((a, b) => {\n        if (Number(a.rows.sales) < Number(b.rows.sales)) {\n          return 1;\n        } else if (Number(a.rows.sales) > Number(b.rows.sales)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }).slice(0, 5));\n      setLabels(products.map(result => {\n        return result.rows.product_name;\n      }));\n      setData(products.map(result => {\n        return result.rows.sales;\n      }));\n    });\n  };\n\n  const getSalesData = async product => {\n    try {\n      const body = {\n        prevStocktake,\n        currentStocktake,\n        product\n      };\n      const response = await fetch(`http://localhost:5000/inventory/sales`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      const parseRes = await response.json();\n      return parseRes;\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  useEffect(() => {\n    if (!_.isEmpty(products) && !_.isEmpty(currentStocktake) && !_.isEmpty(prevStocktake) && _.isEmpty(labels)) {\n      getSales();\n    }\n  }, [productsChange]);\n  return !_.isEmpty(products) && !_.isEmpty(currentStocktake) ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, console.log(labels), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Top Sellers\"), /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: labels,\n      datasets: [{\n        data: data\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: false,\n        position: \"left\",\n        text: \"Top Selling Products\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  })) : /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 8\n    }\n  }, \"Empty\", console.log(products, currentStocktake, prevStocktake));\n};\n\nexport default TopSellerChart;","map":{"version":3,"sources":["C:/Users/alans/bevstock/client/src/components/TopSellerChart.js"],"names":["React","useEffect","useState","Bar","_","TopSellerChart","products","currentStocktake","prevStocktake","setProducts","data","setData","labels","setLabels","productsChange","setProductsChange","getSales","promises","map","product","getSalesData","product_id","then","results","rows","Promise","all","sort","a","b","Number","sales","slice","result","product_name","body","response","fetch","method","headers","JSON","stringify","parseRes","json","error","console","message","isEmpty","log","datasets","legend","display","title","position","text"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport _ from \"lodash\";\r\n\r\nconst TopSellerChart = ({\r\n  products,\r\n  currentStocktake,\r\n  prevStocktake,\r\n  setProducts,\r\n}) => {\r\n  const [data, setData] = useState();\r\n  const [labels, setLabels] = useState([]);\r\n  const [productsChange, setProductsChange] = useState([]);\r\n\r\n  // method to map through the products array, finding a sales figure for each product.\r\n  const getSales = async () => {\r\n    //mapping through the array performing getSalesData function for each product. \r\n    var promises = products.map(function (product) {\r\n      return getSalesData(product.product_id).then(function (results) {\r\n        product.rows = results;\r\n        return product;\r\n      });\r\n    });\r\n    // use promise.all to return resolved values\r\n    Promise.all(promises).then(function (results) {\r\n    \r\n    //set products to top 5 sorted from highest to lowest.   \r\n     setProducts(\r\n        results.sort((a, b) => {\r\n          if (Number(a.rows.sales) < Number(b.rows.sales)) {\r\n            return 1;\r\n          } else if (Number(a.rows.sales) > Number(b.rows.sales)) {\r\n            return -1;\r\n          } else { \r\n            return 0;\r\n          }\r\n        }).slice(0, 5));\r\n\r\n      setLabels(\r\n        products.map((result) => {\r\n          return result.rows.product_name;\r\n        })\r\n      );\r\n      setData(\r\n        products.map((result) => {\r\n          return result.rows.sales;\r\n        })\r\n      );\r\n    });\r\n  };\r\n\r\n  const getSalesData = async (product) => {\r\n    try {\r\n      const body = { prevStocktake, currentStocktake, product };\r\n      const response = await fetch(`http://localhost:5000/inventory/sales`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n      const parseRes = await response.json();\r\n      return parseRes;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if ((!_.isEmpty(products) && !_.isEmpty(currentStocktake) && !_.isEmpty(prevStocktake) && _.isEmpty(labels))) {\r\n      getSales();\r\n    }\r\n  }, [productsChange]);\r\n\r\n  return (!_.isEmpty(products) && !_.isEmpty(currentStocktake)) ? (\r\n    <div>\r\n    {console.log(labels)}\r\n      <h6>Top Sellers</h6>\r\n      <Bar\r\n        data={{\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              data: data,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: {\r\n            display: false,\r\n          },\r\n          title: {\r\n            display: false,\r\n            position: \"left\",\r\n            text: \"Top Selling Products\",\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  ) : (<h1>Empty{console.log(products, currentStocktake, prevStocktake)}</h1>)\r\n};\r\n\r\nexport default TopSellerChart;\r\n"]},"metadata":{},"sourceType":"module"}