{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alans\\\\bevstock\\\\client\\\\src\\\\components\\\\TopSellerChart.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst TopSellerChart = ({\n  products,\n  currentStocktake,\n  prevStocktake\n}) => {\n  const [topSellers, setTopSellers] = useState([]);\n  const [sales, setSales] = useState([]);\n  const [data, setData] = useState();\n  const [labels, setLabels] = useState([]);\n\n  const getSales = async () => {\n    var promises = products.map(function (product) {\n      return getSalesData(product.product_id).then(function (results) {\n        product.rows = results;\n        return product;\n      });\n    });\n    Promise.all(promises).then(function (results) {\n      setSales(results);\n      setLabels(results.map(result => {\n        return result.rows.product_name;\n      }));\n      setData(results.map(result => {\n        return result.rows.sales;\n      }));\n    });\n  };\n\n  const getSalesData = async product => {\n    try {\n      const body = {\n        prevStocktake,\n        currentStocktake,\n        product\n      };\n      const response = await fetch(`http://localhost:5000/inventory/sales`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      const parseRes = await response.json();\n      return parseRes;\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  useEffect(() => {\n    if (products.length > 0) {\n      getSales();\n    }\n  }, [products]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, \"Top Sellers\"), /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: labels,\n      datasets: [{\n        data: data\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: false,\n        position: \"left\",\n        text: \"Top Selling Products\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default TopSellerChart;","map":{"version":3,"sources":["C:/Users/alans/bevstock/client/src/components/TopSellerChart.js"],"names":["React","useEffect","useState","Bar","TopSellerChart","products","currentStocktake","prevStocktake","topSellers","setTopSellers","sales","setSales","data","setData","labels","setLabels","getSales","promises","map","product","getSalesData","product_id","then","results","rows","Promise","all","result","product_name","body","response","fetch","method","headers","JSON","stringify","parseRes","json","error","console","message","length","datasets","legend","display","title","position","text"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nconst TopSellerChart = ({ products, currentStocktake, prevStocktake }) => {\r\n  const [topSellers, setTopSellers] = useState([]);\r\n  const [sales, setSales] = useState([]);\r\n  const [data, setData] = useState();\r\n  const [labels, setLabels] = useState([]);\r\n\r\n  const getSales = async () => {\r\n    var promises = products.map(function (product) {\r\n      return getSalesData(product.product_id).then(function (results) {\r\n        product.rows = results;\r\n        return product;\r\n      });\r\n    });\r\n\r\n    Promise.all(promises).then(function (results) {\r\n      setSales(results);\r\n    setLabels(results.map((result) => {\r\n        return result.rows.product_name;\r\n    }))\r\n    setData(results.map((result) => {\r\n        return result.rows.sales;\r\n    }))\r\n    });\r\n  };\r\n\r\n  const getSalesData = async (product) => {\r\n    try {\r\n      const body = { prevStocktake, currentStocktake, product };\r\n      const response = await fetch(`http://localhost:5000/inventory/sales`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n      const parseRes = await response.json();\r\n      return parseRes;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n \r\n\r\n  useEffect(() => {\r\n    if (products.length > 0) {\r\n      getSales();\r\n    }\r\n  \r\n  }, [products]);\r\n\r\n  return (\r\n    <div>\r\n    <h6>Top Sellers</h6>\r\n      <Bar data={{\r\n          labels: labels,\r\n          datasets: [{\r\n              data: data,\r\n          }]\r\n      }}\r\n      options={{\r\n          legend:{\r\n              display:false\r\n          },\r\n          title:{\r\n              display:false,\r\n              position: \"left\",\r\n              text:\"Top Selling Products\"\r\n          }\r\n      }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopSellerChart;\r\n"]},"metadata":{},"sourceType":"module"}