{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alans\\\\bevstock\\\\client\\\\src\\\\components\\\\stocktaking\\\\StocktakeLists.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Moment from \"react-moment\";\nimport { toast } from \"react-toastify\"; //components\n\nimport ShowLists from \"./ShowLists\";\n\nconst StocktakeLists = ({\n  setAuth\n}) => {\n  const [stocktake, setStocktake] = useState(false);\n  const [allLists, setLists] = useState([]);\n  const [listsChange, setListsChange] = useState(false);\n  const [products, setProducts] = useState([]);\n  const [allCounted, setAllCounted] = useState(false);\n  const [distinctProducts, setDistinctProducts] = useState([]);\n  const currentStocktake = localStorage.getItem(\"laststocktake\");\n  const prevStocktake = localStorage.getItem(\"secondlaststocktake\");\n  const dateString = Date().toString();\n  const stocktake_id = localStorage.getItem(\"stocktake\");\n\n  const checkStocktake = () => {\n    if (stocktake_id !== null) {\n      setStocktake(true);\n    }\n  };\n\n  const getDistinctProducts = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/products/get/distinct\", {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseRes = await response.json();\n      setDistinctProducts(parseRes);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const getProducts = async id => {\n    try {\n      const productsResponse = await fetch(\"http://localhost:5000/stocktake/\", {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const productsResult = await productsResponse.json();\n      setProducts(productsResult.rows);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }; //create a new record for the product passed in as params.\n\n\n  const createRecord = id => {\n    try {\n      const stockId = localStorage.getItem(\"stocktake\");\n      const body = {\n        id,\n        stockId\n      };\n      fetch(\"http://localhost:5000/stocktake/generate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n    } catch (error) {\n      console.error(error.message);\n    }\n  }; //Creates a new record in the stocktake table, and new stocktake records for each product.\n\n\n  const newStocktake = async () => {\n    //check a stocktake is not already in progress\n    if (!stocktake && stocktake_id === null) {\n      try {\n        //insert new record into stocktake table\n        const response = await fetch(\"http://localhost:5000/stocktake/new\", {\n          method: \"POST\",\n          headers: {\n            token: localStorage.token\n          }\n        });\n        const result = await response.json(); //set stocktake and stocktakedate in local storage\n\n        localStorage.setItem(\"stocktake\", result.rows[0].stocktake_id);\n        localStorage.setItem(\"stocktakedate\", result.rows[0].stocktake_date); //create a new record for each product\n\n        products.forEach(product => {\n          createRecord(product.product_stocklist_id);\n        });\n      } catch (err) {\n        console.log(err.message);\n      } //set stocktake boolean to true\n\n\n      setStocktake(true);\n    }\n  };\n\n  const getLists = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/stocklists/\", {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseData = await response.json();\n      setLists(parseData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const checkAllCounted = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/stocklists/inprogress\", {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseData = await response.json();\n\n      if (parseData.length > 0) {\n        setAllCounted(false);\n      } else {\n        setAllCounted(true);\n      }\n    } catch (error) {}\n  };\n\n  const writeSales = (product_id, sales, stocktake) => {\n    try {\n      const body = {\n        product_id,\n        sales,\n        stocktake\n      };\n      fetch(\"http://localhost:5000/inventory/writesales\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const getAndWriteSalesNumbers = async products => {\n    var promises = products.map(product => {\n      return getSalesData(product.product_id);\n    });\n    promises.forEach(promise => {\n      promise.then(result => {\n        writeSales(result.product_id, result.sales, stocktake_id);\n      });\n    });\n  };\n\n  const getSalesData = async product => {\n    try {\n      const body = {\n        currentStocktake,\n        stocktake,\n        product\n      };\n      const response = await fetch(`http://localhost:5000/inventory/sales`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      return await response.json();\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const endStocktake = e => {\n    setListsChange(true);\n\n    if (allCounted) {\n      e.preventDefault();\n      setStocktakeInactive();\n      localStorage.removeItem(\"stocktake\");\n      localStorage.removeItem(\"stocktakedate\");\n      setStocktake(false);\n      toast.success(\"Stocktake ended\");\n      getAndWriteSalesNumbers(distinctProducts);\n    } else {\n      toast.warning(\"Not all counts have been completed\");\n    }\n  };\n\n  const setStocktakeInactive = async () => {\n    try {\n      const body = {\n        stocktake_id\n      };\n      const response = await fetch(\"http://localhost:5000/stocktake/inactive\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      await response.json();\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const logout = e => {\n    e.preventDefault();\n    localStorage.removeItem(\"token\");\n    setAuth(false);\n    toast.success(\"Logged out succsessfully!\");\n  };\n\n  useEffect(() => {\n    getDistinctProducts();\n    checkAllCounted();\n    getProducts();\n    checkStocktake();\n    getLists();\n    setListsChange(false);\n\n    if (products.length > 0) {\n      console.log(products);\n    }\n  }, [listsChange]);\n  return !stocktake_id ? /*#__PURE__*/React.createElement(\"main\", {\n    role: \"main\",\n    className: \"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jumbotron\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary float-right\",\n    onClick: e => logout(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, \"Logout\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  }, \"Stocktake\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }, \"Create a new stocktaking record for \", dateString, \"?\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-info\",\n    onClick: newStocktake,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, \"Start Stocktake\")))) : /*#__PURE__*/React.createElement(\"main\", {\n    role: \"main\",\n    className: \"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jumbotron\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-danger float-right\",\n    onClick: e => endStocktake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, \"End Stocktake\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 11\n    }\n  }, \"Stocktake\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }, \"Stocktake in progress :\", \" \", /*#__PURE__*/React.createElement(Moment, {\n    date: localStorage.getItem(\"stocktakedate\"),\n    format: \"DD/MM/YYYY HH:mm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ShowLists, {\n    allLists: allLists,\n    setListsChange: setListsChange,\n    stocktake: stocktake,\n    stocktake_id: stocktake_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default StocktakeLists;","map":{"version":3,"sources":["C:/Users/alans/bevstock/client/src/components/stocktaking/StocktakeLists.js"],"names":["React","useState","useEffect","Moment","toast","ShowLists","StocktakeLists","setAuth","stocktake","setStocktake","allLists","setLists","listsChange","setListsChange","products","setProducts","allCounted","setAllCounted","distinctProducts","setDistinctProducts","currentStocktake","localStorage","getItem","prevStocktake","dateString","Date","toString","stocktake_id","checkStocktake","getDistinctProducts","response","fetch","method","headers","token","parseRes","json","error","console","message","getProducts","id","productsResponse","productsResult","rows","createRecord","stockId","body","JSON","stringify","newStocktake","result","setItem","stocktake_date","forEach","product","product_stocklist_id","err","log","getLists","parseData","checkAllCounted","length","writeSales","product_id","sales","getAndWriteSalesNumbers","promises","map","getSalesData","promise","then","endStocktake","e","preventDefault","setStocktakeInactive","removeItem","success","warning","logout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Moment from \"react-moment\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\n//components\r\nimport ShowLists from \"./ShowLists\";\r\n\r\nconst StocktakeLists = ({ setAuth }) => {\r\n  const [stocktake, setStocktake] = useState(false);\r\n  const [allLists, setLists] = useState([]);\r\n  const [listsChange, setListsChange] = useState(false);\r\n  const [products, setProducts] = useState([]);\r\n  const [allCounted, setAllCounted] = useState(false);\r\n  const [distinctProducts, setDistinctProducts] = useState([]);\r\n  const currentStocktake = localStorage.getItem(\"laststocktake\");\r\n  const prevStocktake = localStorage.getItem(\"secondlaststocktake\");\r\n  const dateString = Date().toString();\r\n\r\n  const stocktake_id = localStorage.getItem(\"stocktake\");\r\n\r\n  const checkStocktake = () => {\r\n    if (stocktake_id !== null) {\r\n      setStocktake(true);\r\n    }\r\n  };\r\n\r\n  const getDistinctProducts = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:5000/products/get/distinct\",\r\n        {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        }\r\n      );\r\n      const parseRes = await response.json();\r\n      setDistinctProducts(parseRes);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  const getProducts = async (id) => {\r\n    try {\r\n      const productsResponse = await fetch(\"http://localhost:5000/stocktake/\", {\r\n        method: \"GET\",\r\n        headers: { token: localStorage.token },\r\n      });\r\n      const productsResult = await productsResponse.json();\r\n      setProducts(productsResult.rows);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  //create a new record for the product passed in as params.\r\n  const createRecord = (id) => {\r\n    try {\r\n      const stockId = localStorage.getItem(\"stocktake\");\r\n      const body = { id, stockId };\r\n\r\n      fetch(\"http://localhost:5000/stocktake/generate\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  //Creates a new record in the stocktake table, and new stocktake records for each product.\r\n  const newStocktake = async () => {\r\n    //check a stocktake is not already in progress\r\n    if (!stocktake && stocktake_id === null) {\r\n      try {\r\n        //insert new record into stocktake table\r\n        const response = await fetch(\"http://localhost:5000/stocktake/new\", {\r\n          method: \"POST\",\r\n          headers: { token: localStorage.token },\r\n        });\r\n        const result = await response.json();\r\n        //set stocktake and stocktakedate in local storage\r\n        localStorage.setItem(\"stocktake\", result.rows[0].stocktake_id);\r\n        localStorage.setItem(\"stocktakedate\", result.rows[0].stocktake_date);\r\n        //create a new record for each product\r\n        products.forEach((product) => {\r\n          createRecord(product.product_stocklist_id);\r\n        });\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n      //set stocktake boolean to true\r\n      setStocktake(true);\r\n    }\r\n  };\r\n\r\n  const getLists = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/stocklists/\", {\r\n        method: \"GET\",\r\n        headers: { token: localStorage.token },\r\n      });\r\n\r\n      const parseData = await response.json();\r\n      setLists(parseData);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const checkAllCounted = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:5000/stocklists/inprogress\",\r\n        {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        }\r\n      );\r\n\r\n      const parseData = await response.json();\r\n\r\n      if (parseData.length > 0) {\r\n        setAllCounted(false);\r\n      } else {\r\n        setAllCounted(true);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  const writeSales = (product_id, sales, stocktake) => {\r\n    try {\r\n      const body = { product_id, sales, stocktake };\r\n      fetch(\"http://localhost:5000/inventory/writesales\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  const getAndWriteSalesNumbers = async (products) => {\r\n    var promises = products.map((product) => {\r\n      return getSalesData(product.product_id);\r\n    });\r\n    promises.forEach((promise) => {\r\n      promise.then((result) => {\r\n        writeSales(result.product_id, result.sales, stocktake_id);\r\n      });\r\n    });\r\n  };\r\n\r\n  const getSalesData = async (product) => {\r\n    try {\r\n      const body = { currentStocktake, stocktake, product };\r\n      const response = await fetch(`http://localhost:5000/inventory/sales`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  const endStocktake = (e) => {\r\n    setListsChange(true);\r\n    if (allCounted) {\r\n      e.preventDefault();\r\n      setStocktakeInactive();\r\n      localStorage.removeItem(\"stocktake\");\r\n      localStorage.removeItem(\"stocktakedate\");\r\n      setStocktake(false);\r\n      toast.success(\"Stocktake ended\");\r\n      getAndWriteSalesNumbers(distinctProducts);\r\n    } else {\r\n      toast.warning(\"Not all counts have been completed\");\r\n    }\r\n  };\r\n\r\n  const setStocktakeInactive = async () => {\r\n    try {\r\n      const body = { stocktake_id };\r\n      const response = await fetch(\"http://localhost:5000/stocktake/inactive\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n      await response.json();\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  const logout = (e) => {\r\n    e.preventDefault();\r\n    localStorage.removeItem(\"token\");\r\n    setAuth(false);\r\n    toast.success(\"Logged out succsessfully!\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDistinctProducts();\r\n    checkAllCounted();\r\n    getProducts();\r\n    checkStocktake();\r\n    getLists();\r\n    setListsChange(false);\r\n    if (products.length > 0) {\r\n      console.log(products);\r\n    }\r\n  }, [listsChange]);\r\n\r\n  return !stocktake_id ? (\r\n    <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\">\r\n      <div className=\"jumbotron\">\r\n        <button\r\n          className=\"btn btn-primary float-right\"\r\n          onClick={(e) => logout(e)}\r\n        >\r\n          Logout\r\n        </button>\r\n        <div className=\"container\">\r\n          <h1 className=\"display-3\">Stocktake</h1>\r\n          <h4>Create a new stocktaking record for {dateString}?</h4>\r\n          <button className=\"btn btn-info\" onClick={newStocktake}>\r\n            Start Stocktake\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  ) : (\r\n    <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\">\r\n      <div className=\"jumbotron\">\r\n        <button\r\n          className=\"btn btn-danger float-right\"\r\n          onClick={(e) => endStocktake(e)}\r\n        >\r\n          End Stocktake\r\n        </button>\r\n        <div className=\"container\">\r\n          <h1 className=\"display-3\">Stocktake</h1>\r\n          <h4>\r\n            Stocktake in progress :{\" \"}\r\n            <Moment\r\n              date={localStorage.getItem(\"stocktakedate\")}\r\n              format=\"DD/MM/YYYY HH:mm\"\r\n            />\r\n          </h4>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <ShowLists\r\n          allLists={allLists}\r\n          setListsChange={setListsChange}\r\n          stocktake={stocktake}\r\n          stocktake_id={stocktake_id}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default StocktakeLists;\r\n"]},"metadata":{},"sourceType":"module"}