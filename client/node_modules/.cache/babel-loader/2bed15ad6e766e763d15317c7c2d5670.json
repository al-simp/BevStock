{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alans\\\\bevstock\\\\client\\\\src\\\\components\\\\stocktaking\\\\Count.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Dropdown from \"./Dropdown\";\nimport CountModal from \"./CountModal\";\nimport _ from \"lodash\";\n\nconst Count = props => {\n  const [name, setName] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [productsChange, setProductsChange] = useState(false);\n  const [quantity, setQuantity] = useState(0);\n  const [reloaded, setReloaded] = useState(false); // get the list id from the url params\n\n  const id = props.match.params.id; //get stocktake id from the url params\n\n  const stocktake = props.match.params.stocktakeid; //get list name using list id\n\n  const getName = async id => {\n    console.log(\"AM I RUNNING BEFORE REFRESH: \", id);\n\n    try {\n      const response = await fetch(`http://localhost:5000/stocklists/get/${id}`, {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const parseRes = await response.json(); // API call returns an array of length 1,so get 1st value\n\n      setName(parseRes.rows[0].stocklist_name);\n    } catch (err) {\n      console.error(err.message);\n    }\n  }; //get products on list and initialise quantities\n\n\n  const getCountProducts = async (id, stocktake) => {\n    try {\n      const body = {\n        id,\n        stocktake\n      };\n      const response = await fetch(`http://localhost:5000/stocktake/liststocktake`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      const parseRes = await response.json();\n      console.log(parseRes);\n      setProducts(parseRes);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const reload = () => {\n    window.location.reload(false);\n    setReloaded(true);\n  }; //delete a product from list\n\n\n  const deleteProduct = async id => {\n    try {\n      await fetch(`http://localhost:5000/stocklists/deleteproduct/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n    } catch (err) {\n      console.error(err.message);\n    }\n\n    setProductsChange(true);\n  };\n\n  useEffect(() => {\n    getName(id);\n    getCountProducts(id, stocktake);\n    setProductsChange(false);\n  }, [setProductsChange]);\n  useEffect(() => {\n    if (reloaded) {\n      reload();\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    role: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jumbotron\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, name), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    listId: id,\n    setProductsChange: setProductsChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => window.location.reload(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, \" Click to refresh \"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, \"Product\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }, \"Quantity\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, \"Count\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, products.map(product => /*#__PURE__*/React.createElement(\"tr\", {\n    key: product.product_stocklist_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }\n  }, product.product_name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 19\n    }\n  }, product.quantity), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CountModal, {\n    product: product,\n    setProductsChange: setProductsChange,\n    stocktakeid: stocktake,\n    setQuantity: setQuantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 23\n    }\n  })))))))));\n};\n\nexport default Count;","map":{"version":3,"sources":["C:/Users/alans/bevstock/client/src/components/stocktaking/Count.js"],"names":["React","Fragment","useState","useEffect","Dropdown","CountModal","_","Count","props","name","setName","products","setProducts","productsChange","setProductsChange","quantity","setQuantity","reloaded","setReloaded","id","match","params","stocktake","stocktakeid","getName","console","log","response","fetch","method","headers","token","localStorage","parseRes","json","rows","stocklist_name","err","error","message","getCountProducts","body","JSON","stringify","reload","window","location","deleteProduct","map","product","product_stocklist_id","product_name"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport CountModal from \"./CountModal\";\r\nimport _ from \"lodash\";\r\n\r\nconst Count = (props) => {\r\n  const [name, setName] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [productsChange, setProductsChange] = useState(false);\r\n  const [quantity, setQuantity] = useState(0);\r\n  const [reloaded, setReloaded] = useState(false);\r\n  \r\n\r\n\r\n\r\n  // get the list id from the url params\r\n  const id = props.match.params.id;\r\n\r\n  //get stocktake id from the url params\r\n  const stocktake = props.match.params.stocktakeid;\r\n\r\n  //get list name using list id\r\n  const getName = async (id) => {\r\n    console.log(\"AM I RUNNING BEFORE REFRESH: \", id) \r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/stocklists/get/${id}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        }\r\n      );\r\n\r\n      const parseRes = await response.json();\r\n\r\n      // API call returns an array of length 1,so get 1st value\r\n      setName(parseRes.rows[0].stocklist_name);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n\r\n  };\r\n\r\n  //get products on list and initialise quantities\r\n  const getCountProducts = async (id, stocktake) => {\r\n    try {\r\n      const body = { id, stocktake }\r\n      const response = await fetch(\r\n        `http://localhost:5000/stocktake/liststocktake`,\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-type\": \"application/json\" },\r\n          body: JSON.stringify(body),\r\n        }\r\n      );\r\n\r\n      const parseRes = await response.json();\r\n\r\n      console.log(parseRes);\r\n      setProducts(parseRes);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const reload = () => {\r\n    window.location.reload(false);\r\n    setReloaded(true)\r\n  }\r\n\r\n\r\n  //delete a product from list\r\n  const deleteProduct = async (id) => {\r\n    try {\r\n      await fetch(`http://localhost:5000/stocklists/deleteproduct/${id}`, {\r\n        method: \"DELETE\",\r\n        headers: { token: localStorage.token },\r\n      });\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n\r\n    setProductsChange(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getName(id);\r\n    getCountProducts(id, stocktake);\r\n    setProductsChange(false);\r\n  }, [setProductsChange]);\r\n\r\n  useEffect(() => {\r\n    if (reloaded) {\r\n      reload();\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <main role=\"main\">\r\n        <div className=\"jumbotron\">\r\n          <h1 className=\"display-3\">{name}</h1>\r\n          <div>\r\n            <Dropdown listId={id} setProductsChange={setProductsChange} />\r\n          </div>\r\n          <div>\r\n            <button onClick={() => window.location.reload(false)}> Click to refresh </button>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <table className=\"table text-center\">\r\n          <thead>\r\n            <tr>\r\n              <th>Product</th>\r\n              <th>Quantity</th>\r\n              <th>Count</th>\r\n            </tr>\r\n          </thead>\r\n            <tbody>\r\n              {products.map((product) => (\r\n                <tr key={product.product_stocklist_id}>\r\n                  <td>{product.product_name}</td>\r\n                  <td>{product.quantity}</td>\r\n                  <td><CountModal product={product} setProductsChange={setProductsChange} stocktakeid={stocktake} setQuantity={setQuantity}/></td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </main>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Count;\r\n"]},"metadata":{},"sourceType":"module"}