{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alans\\\\bevstock\\\\client\\\\src\\\\components\\\\TopSellerChart.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst TopSellerChart = ({\n  products,\n  currentStocktake,\n  prevStocktake\n}) => {\n  const [topSellers, setTopSellers] = useState([]);\n  const [sales, setSales] = useState([]);\n  const [chartData, setChartData] = useState({});\n\n  const getSales = async () => {\n    var promises = products.map(function (product) {\n      return getSalesData(product.product_id).then(function (results) {\n        product.rows = results;\n        return product;\n      });\n    });\n    Promise.all(promises).then(function (results) {\n      setSales(results);\n    });\n  };\n\n  const getSalesData = async product => {\n    try {\n      const body = {\n        prevStocktake,\n        currentStocktake,\n        product\n      };\n      const response = await fetch(`http://localhost:5000/inventory/sales`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      const parseRes = await response.json();\n      return parseRes;\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const getData = () => {\n    setChartData({\n      labels: [\"Bushmills\", \"Smirnoff\"],\n      datasets: [{\n        label: 'Sales',\n        data: [0, 5]\n      }]\n    });\n  };\n\n  useEffect(() => {\n    if (products.length > 0) {\n      getSales();\n    }\n\n    if (sales.length > 0) {\n      getData();\n    }\n  }, [products]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default TopSellerChart;","map":{"version":3,"sources":["C:/Users/alans/bevstock/client/src/components/TopSellerChart.js"],"names":["React","useEffect","useState","Bar","TopSellerChart","products","currentStocktake","prevStocktake","topSellers","setTopSellers","sales","setSales","chartData","setChartData","getSales","promises","map","product","getSalesData","product_id","then","results","rows","Promise","all","body","response","fetch","method","headers","JSON","stringify","parseRes","json","error","console","message","getData","labels","datasets","label","data","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,iBAApB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,gBAAZ;AAA8BC,EAAAA;AAA9B,CAAD,KAAmD;AACxE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMY,QAAQ,GAAG,YAAY;AAC3B,QAAIC,QAAQ,GAAGV,QAAQ,CAACW,GAAT,CAAa,UAAUC,OAAV,EAAmB;AAC7C,aAAOC,YAAY,CAACD,OAAO,CAACE,UAAT,CAAZ,CAAiCC,IAAjC,CAAsC,UAAUC,OAAV,EAAmB;AAC9DJ,QAAAA,OAAO,CAACK,IAAR,GAAeD,OAAf;AACA,eAAOJ,OAAP;AACD,OAHM,CAAP;AAID,KALc,CAAf;AAOAM,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAAsBK,IAAtB,CAA2B,UAAUC,OAAV,EAAmB;AAC5CV,MAAAA,QAAQ,CAACU,OAAD,CAAR;AACD,KAFD;AAGD,GAXD;;AAaA,QAAMH,YAAY,GAAG,MAAOD,OAAP,IAAmB;AACtC,QAAI;AACF,YAAMQ,IAAI,GAAG;AAAElB,QAAAA,aAAF;AAAiBD,QAAAA,gBAAjB;AAAmCW,QAAAA;AAAnC,OAAb;AACA,YAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAE,uCAAF,EAA0C;AACpEC,QAAAA,MAAM,EAAE,MAD4D;AAEpEC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAF2D;AAGpEJ,QAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AAH8D,OAA1C,CAA5B;AAKA,YAAMO,QAAQ,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAvB;AACA,aAAOD,QAAP;AACD,KATD,CASE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD;AACF,GAbD;;AAeA,QAAMC,OAAO,GAAG,MAAM;AACpBxB,IAAAA,YAAY,CAAC;AACXyB,MAAAA,MAAM,EAAE,CAAC,WAAD,EAAc,UAAd,CADG;AAEXC,MAAAA,QAAQ,EAAE,CAAC;AACPC,QAAAA,KAAK,EAAE,OADA;AAEPC,QAAAA,IAAI,EAAE,CACF,CADE,EACC,CADD;AAFC,OAAD;AAFC,KAAD,CAAZ;AASD,GAVD;;AAYAxC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,QAAQ,CAACqC,MAAT,GAAkB,CAAtB,EAAyB;AACvB5B,MAAAA,QAAQ;AACT;;AACD,QAAIJ,KAAK,CAACgC,MAAN,GAAe,CAAnB,EAAsB;AACpBL,MAAAA,OAAO;AACR;AACF,GAPQ,EAON,CAAChC,QAAD,CAPM,CAAT;AASA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAEO,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CA5DD;;AA8DA,eAAeR,cAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nconst TopSellerChart = ({ products, currentStocktake, prevStocktake }) => {\r\n  const [topSellers, setTopSellers] = useState([]);\r\n  const [sales, setSales] = useState([]);\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  const getSales = async () => {\r\n    var promises = products.map(function (product) {\r\n      return getSalesData(product.product_id).then(function (results) {\r\n        product.rows = results;\r\n        return product;\r\n      });\r\n    });\r\n\r\n    Promise.all(promises).then(function (results) {\r\n      setSales(results);\r\n    });\r\n  };\r\n\r\n  const getSalesData = async (product) => {\r\n    try {\r\n      const body = { prevStocktake, currentStocktake, product };\r\n      const response = await fetch(`http://localhost:5000/inventory/sales`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n      const parseRes = await response.json();\r\n      return parseRes;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  const getData = () => {\r\n    setChartData({\r\n      labels: [\"Bushmills\", \"Smirnoff\"],\r\n      datasets: [{\r\n          label: 'Sales',\r\n          data: [\r\n              0, 5\r\n          ],\r\n      }]\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (products.length > 0) {\r\n      getSales();\r\n    }\r\n    if (sales.length > 0) {\r\n      getData();\r\n    }\r\n  }, [products]);\r\n\r\n  return (\r\n    <div>\r\n     \r\n      <Bar data={chartData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopSellerChart;\r\n"]},"metadata":{},"sourceType":"module"}